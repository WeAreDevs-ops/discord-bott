
<%- include('layout', { title: guild.name + ' - Configuration', showSidebar: true, guild: guild, body: `
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex align-items-center mb-4">
                ${guild.icon ? `
                    <img src="https://cdn.discordapp.com/icons/${guild.id}/${guild.icon}.png" 
                         class="rounded me-3" width="64" height="64" alt="${guild.name}">
                ` : `
                    <div class="bg-secondary rounded d-flex align-items-center justify-content-center me-3" 
                         style="width: 64px; height: 64px;">
                        <i class="fas fa-server text-white fa-2x"></i>
                    </div>
                `}
                <div>
                    <h2 class="mb-1">${guild.name}</h2>
                    <p class="text-muted mb-0">Configure your bot settings</p>
                </div>
            </div>

            <!-- Welcome Messages Section -->
            <div class="card mb-4" id="welcome">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-door-open me-2"></i>
                        Welcome Messages
                    </h5>
                </div>
                <div class="card-body">
                    <form id="welcomeForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="welcomeChannel" class="form-label">Welcome Channel</label>
                                    <select class="form-select" id="welcomeChannel">
                                        <option value="">Select a channel...</option>` +
                                        channels.map(channel => `
                                            <option value="${channel.id}" ${settings.welcome && settings.welcome.welcomeChannel === channel.id ? 'selected' : ''}>
                                                # ${channel.name}
                                            </option>
                                        `).join('') + `
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="welcomeEnabled" 
                                               ${settings.welcome && settings.welcome.enabled ? 'checked' : ''}>
                                        <label class="form-check-label" for="welcomeEnabled">
                                            Enable welcome messages
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="welcomeMessages" class="form-label">Welcome Messages</label>
                                    <textarea class="form-control" id="welcomeMessages" rows="4" 
                                              placeholder="Welcome {user} to {server}! You are the {membercount} member!">${settings.welcome && settings.welcome.welcomeMessages ? settings.welcome.welcomeMessages.join('\\n') : ''}</textarea>
                                    <div class="form-text">
                                        Variables: {user}, {username}, {displayname}, {mention}, {server}, {membercount}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>
                            Save Welcome Settings
                        </button>
                    </form>
                </div>
            </div>

            <!-- Leave Messages Section -->
            <div class="card mb-4" id="leave">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-door-closed me-2"></i>
                        Leave Messages
                    </h5>
                </div>
                <div class="card-body">
                    <form id="leaveForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="leaveChannel" class="form-label">Leave Channel</label>
                                    <select class="form-select" id="leaveChannel">
                                        <option value="">Select a channel...</option>` +
                                        channels.map(channel => `
                                            <option value="${channel.id}" ${settings.welcome && settings.welcome.leaveChannel === channel.id ? 'selected' : ''}>
                                                # ${channel.name}
                                            </option>
                                        `).join('') + `
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="leaveEnabled" 
                                               ${settings.welcome && settings.welcome.leaveEnabled ? 'checked' : ''}>
                                        <label class="form-check-label" for="leaveEnabled">
                                            Enable leave messages
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="leaveMessages" class="form-label">Leave Messages</label>
                                    <textarea class="form-control" id="leaveMessages" rows="4" 
                                              placeholder="{username} has left {server}. We'll miss you! ðŸ‘‹">${settings.welcome && settings.welcome.leaveMessages ? settings.welcome.leaveMessages.join('\\n') : ''}</textarea>
                                    <div class="form-text">
                                        Variables: {user}, {username}, {displayname}, {mention}, {server}, {membercount}
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>
                            Save Leave Settings
                        </button>
                    </form>
                </div>
            </div>

            <!-- Auto Moderation Section -->
            <div class="card mb-4" id="automod">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-shield-alt me-2"></i>
                        Auto Moderation
                    </h5>
                </div>
                <div class="card-body">
                    <form id="automodForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="linkFilter" 
                                               ${settings.automod && settings.automod.linkFilter ? 'checked' : ''}>
                                        <label class="form-check-label" for="linkFilter">
                                            <strong>Link Filter</strong><br>
                                            <small class="text-muted">Automatically delete messages containing links</small>
                                        </label>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="badWordFilter" 
                                               ${settings.automod && settings.automod.badWordFilter ? 'checked' : ''}>
                                        <label class="form-check-label" for="badWordFilter">
                                            <strong>Bad Word Filter</strong><br>
                                            <small class="text-muted">Automatically delete inappropriate content</small>
                                        </label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="badWords" class="form-label">Bad Words List</label>
                                    <textarea class="form-control" id="badWords" rows="4" 
                                              placeholder="Enter bad words, one per line">${settings.automod && settings.automod.badWords ? settings.automod.badWords.join('\\n') : ''}</textarea>
                                    <div class="form-text">
                                        One word per line. Administrators and moderators bypass these filters.
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>
                            Save Auto Moderation Settings
                        </button>
                    </form>
                </div>
            </div>

            <!-- Auto Role Section -->
            <div class="card mb-4" id="autorole">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-user-plus me-2"></i>
                        Auto Role
                    </h5>
                </div>
                <div class="card-body">
                    <form id="autoroleForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="autoRole" class="form-label">Auto Role</label>
                                    <select class="form-select" id="autoRole">
                                        <option value="">No auto role</option>` +
                                        roles.map(role => `
                                            <option value="${role.id}" ${settings.autorole === role.id ? 'selected' : ''}>
                                                ${role.name}
                                            </option>
                                        `).join('') + `
                                    </select>
                                    <div class="form-text">
                                        This role will be automatically assigned to new members when they join the server.
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-2"></i>
                            Save Auto Role Settings
                        </button>
                    </form>
                </div>
            </div>

            <!-- Embed Management Section -->
            <div class="card mb-4" id="embeds">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-layer-group me-2"></i>
                        Embed Management
                    </h5>
                    <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#embedModal">
                        <i class="fas fa-plus me-2"></i>
                        Create Embed
                    </button>
                </div>
                <div class="card-body">` +
                    (Object.keys(settings.embeds || {}).length > 0 ? `
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Embed ID</th>
                                    <th>Title</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>` +
                                Object.values(settings.embeds || {}).map(embed => `
                                <tr>
                                    <td><code>${embed.id}</code></td>
                                    <td>${embed.title || 'Untitled'}</td>
                                    <td>${new Date(embed.createdAt).toLocaleDateString()}</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-outline-primary me-2" 
                                                onclick="editEmbed('${embed.id}')">
                                            <i class="fas fa-edit"></i> Edit
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-danger" 
                                                onclick="deleteEmbed('${embed.id}')">
                                            <i class="fas fa-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                                `).join('') + `
                            </tbody>
                        </table>
                    </div>` : `
                    <div class="text-center py-4">
                        <i class="fas fa-layer-group fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No embeds created yet</h5>
                        <p class="text-muted">Click "Create Embed" to get started!</p>
                    </div>`) + `
                </div>
            </div>

            <!-- Commands Section -->
            <div class="card mb-4" id="commands">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-terminal me-2"></i>
                        Command Settings
                    </h5>
                </div>
                <div class="card-body">
                    <p class="text-muted">
                        Current command assignments and channel restrictions are managed through the bot commands.
                        Use <code>/commandassign</code> and <code>/restrictchannel</code> commands in Discord for now.
                    </p>
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        <strong>Note:</strong> Full command management interface will be added in a future update.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Embed Creation Modal -->
<div class="modal fade" id="embedModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="embedModalTitle">Create Embed</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="embedForm">
                    <input type="hidden" id="embedId" value="">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="embedTitle" class="form-label">Title</label>
                                <input type="text" class="form-control" id="embedTitle" placeholder="Embed title">
                            </div>
                            <div class="mb-3">
                                <label for="embedDescription" class="form-label">Description</label>
                                <textarea class="form-control" id="embedDescription" rows="4" placeholder="Embed description"></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="embedColor" class="form-label">Color</label>
                                <input type="text" class="form-control" id="embedColor" placeholder="#0099ff or blue">
                                <div class="form-text">Use hex codes (#0099ff) or color names (blue, red, green)</div>
                            </div>
                            <div class="mb-3">
                                <label for="embedFooter" class="form-label">Footer Text</label>
                                <input type="text" class="form-control" id="embedFooter" placeholder="Footer text">
                            </div>
                            <div class="mb-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="embedTimestamp">
                                    <label class="form-check-label" for="embedTimestamp">
                                        Add timestamp
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="embedThumbnail" class="form-label">Thumbnail URL</label>
                                <input type="url" class="form-control" id="embedThumbnail" placeholder="https://example.com/image.png">
                            </div>
                            <div class="mb-3">
                                <label for="embedImage" class="form-label">Image URL</label>
                                <input type="url" class="form-control" id="embedImage" placeholder="https://example.com/image.png">
                            </div>
                            <div class="mb-3">
                                <label for="embedButtons" class="form-label">Buttons</label>
                                <textarea class="form-control" id="embedButtons" rows="3" placeholder="Label1,https://example.com|Label2,https://example.com"></textarea>
                                <div class="form-text">
                                    Format: "Label,URL" separated by | (max 5 buttons)<br>
                                    With emoji: "&lt;:emoji:id&gt; Label,URL" or "&lt;a:emoji:id&gt; Label,URL"
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="embedChannel" class="form-label">Send to Channel (Optional)</label>
                                <select class="form-select" id="embedChannel">
                                    <option value="">Don't send - just save</option>` +
                                    channels.map(channel => `
                                        <option value="${channel.id}"># ${channel.name}</option>
                                    `).join('') + `
                                </select>
                                <div class="form-text">Choose a channel to send the embed to, or leave empty to just save it</div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="saveEmbedBtn">Save Embed</button>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const guildId = '${guild.id}';

    // Handle welcome form submission
    document.getElementById('welcomeForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = {
            channelId: document.getElementById('welcomeChannel').value,
            messages: document.getElementById('welcomeMessages').value.split('\\n').filter(m => m.trim()),
            enabled: document.getElementById('welcomeEnabled').checked
        };

        try {
            const response = await axios.post(\`/api/guild/\${guildId}/welcome\`, formData);
            if (response.data.success) {
                showAlert('Welcome settings saved successfully!', 'success');
            }
        } catch (error) {
            showAlert('Failed to save welcome settings', 'danger');
        }
    });

    // Handle leave form submission
    document.getElementById('leaveForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = {
            channelId: document.getElementById('leaveChannel').value,
            messages: document.getElementById('leaveMessages').value.split('\\n').filter(m => m.trim()),
            enabled: document.getElementById('leaveEnabled').checked
        };

        try {
            const response = await axios.post(\`/api/guild/\${guildId}/leave\`, formData);
            if (response.data.success) {
                showAlert('Leave settings saved successfully!', 'success');
            }
        } catch (error) {
            showAlert('Failed to save leave settings', 'danger');
        }
    });

    // Handle automod form submission
    document.getElementById('automodForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = {
            linkFilter: document.getElementById('linkFilter').checked,
            badWordFilter: document.getElementById('badWordFilter').checked,
            badWords: document.getElementById('badWords').value.split('\\n').filter(w => w.trim())
        };

        try {
            const response = await axios.post(\`/api/guild/\${guildId}/automod\`, formData);
            if (response.data.success) {
                showAlert('Auto moderation settings saved successfully!', 'success');
            }
        } catch (error) {
            showAlert('Failed to save auto moderation settings', 'danger');
        }
    });

    // Handle autorole form submission
    document.getElementById('autoroleForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const formData = {
            roleId: document.getElementById('autoRole').value
        };

        try {
            const response = await axios.post(\`/api/guild/\${guildId}/autorole\`, formData);
            if (response.data.success) {
                showAlert('Auto role settings saved successfully!', 'success');
            }
        } catch (error) {
            showAlert('Failed to save auto role settings', 'danger');
        }
    });

    // Handle embed form submission
    document.getElementById('saveEmbedBtn').addEventListener('click', async function() {
        const embedId = document.getElementById('embedId').value;
        const isUpdate = !!embedId;

        const formData = {
            title: document.getElementById('embedTitle').value,
            description: document.getElementById('embedDescription').value,
            color: document.getElementById('embedColor').value,
            thumbnail: document.getElementById('embedThumbnail').value,
            image: document.getElementById('embedImage').value,
            footer: document.getElementById('embedFooter').value,
            timestamp: document.getElementById('embedTimestamp').checked,
            buttons: document.getElementById('embedButtons').value,
            channel: document.getElementById('embedChannel').value
        };

        try {
            let response;
            if (isUpdate) {
                response = await axios.post(\`/api/guild/\${guildId}/embed/\${embedId}/update\`, formData);
            } else {
                response = await axios.post(\`/api/guild/\${guildId}/embed/create\`, formData);
            }

            if (response.data.success) {
                showAlert(\`Embed \${isUpdate ? 'updated' : 'created'} successfully!\`, 'success');
                bootstrap.Modal.getInstance(document.getElementById('embedModal')).hide();
                setTimeout(() => location.reload(), 1000);
            }
        } catch (error) {
            showAlert(\`Failed to \${isUpdate ? 'update' : 'create'} embed\`, 'danger');
        }
    });

    // Global functions for embed management
    window.editEmbed = async function(embedId) {
        try {
            // Get embed data from the settings object or fetch from API
            const embeds = ${JSON.stringify(settings.embeds || {})};
            const embed = embeds[embedId];
            
            if (!embed) {
                showAlert('Embed not found', 'danger');
                return;
            }

            // Populate form with existing data
            document.getElementById('embedId').value = embedId;
            document.getElementById('embedTitle').value = embed.title || '';
            document.getElementById('embedDescription').value = embed.description || '';
            document.getElementById('embedColor').value = embed.color || '';
            document.getElementById('embedThumbnail').value = embed.thumbnail || '';
            document.getElementById('embedImage').value = embed.image || '';
            document.getElementById('embedFooter').value = embed.footer || '';
            document.getElementById('embedTimestamp').checked = embed.timestamp || false;
            document.getElementById('embedButtons').value = embed.buttons || '';

            document.getElementById('embedModalTitle').textContent = 'Edit Embed';
            new bootstrap.Modal(document.getElementById('embedModal')).show();
        } catch (error) {
            showAlert('Failed to load embed data', 'danger');
        }
    };

    window.deleteEmbed = async function(embedId) {
        if (!confirm('Are you sure you want to delete this embed? This action cannot be undone.')) {
            return;
        }

        try {
            const response = await axios.delete(\`/api/guild/\${guildId}/embed/\${embedId}\`);
            if (response.data.success) {
                showAlert('Embed deleted successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            }
        } catch (error) {
            showAlert('Failed to delete embed', 'danger');
        }
    };

    // Reset modal when it's hidden
    document.getElementById('embedModal').addEventListener('hidden.bs.modal', function() {
        document.getElementById('embedForm').reset();
        document.getElementById('embedId').value = '';
        document.getElementById('embedModalTitle').textContent = 'Create Embed';
    });

    function showAlert(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = \`alert alert-\${type} alert-dismissible fade show\`;
        alertDiv.innerHTML = \`
            \${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        \`;

        document.querySelector('.container-fluid').insertBefore(alertDiv, document.querySelector('.container-fluid').firstChild);

        setTimeout(() => {
            alertDiv.remove();
        }, 5000);
    }
});
</script>
` }) %>
