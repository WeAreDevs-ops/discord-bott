<%- include('layout', { title: 'Guild Configuration - INC BOT', showSidebar: true, body: `
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex align-items-center justify-content-between mb-4">
                <div>
                    <h2 class="mb-2" style="color: var(--discord-text-normal); font-weight: 600;">
                        <i class="fas fa-cog me-3" style="color: var(--discord-blurple);"></i>
                        ${guild.name}
                    </h2>
                    <p class="text-muted mb-0">Configure bot settings for this server</p>
                </div>
                <a href="/dashboard" class="btn btn-outline-primary">
                    <i class="fas fa-arrow-left me-2"></i>
                    Back to Dashboard
                </a>
            </div>

            <!-- Welcome Messages Section -->
            <div class="card modern-card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-hand-wave me-2"></i>
                        Welcome Messages
                    </h5>
                </div>
                <div class="card-body">
                    <form id="welcomeForm">
                        <div class="row">
                            <div class="col-md-6">
                                <label for="welcomeChannel" class="form-label">Welcome Channel</label>
                                <select class="form-select" id="welcomeChannel" name="channelId">
                                    <option value="">Select a channel...</option>
                                    ${channels.map(channel => `
                                        <option value="${channel.id}" ${settings.welcome.welcomeChannel === channel.id ? 'selected' : ''}>
                                            #${channel.name}
                                        </option>
                                    `).join('')}
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="welcomeEnabled" class="form-label">Status</label>
                                <div class="form-check form-switch mt-2">
                                    <input class="form-check-input" type="checkbox" id="welcomeEnabled" ${settings.welcome.welcomeEnabled ? 'checked' : ''}>
                                    <label class="form-check-label" for="welcomeEnabled">
                                        Enable welcome messages
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label for="welcomeMessages" class="form-label">
                                Welcome Messages (comma separated)
                            </label>
                            <textarea class="form-control" id="welcomeMessages" rows="4" 
                                      placeholder="Welcome {user} to {server}!, {user} just joined the server!">${(settings.welcome.welcomeMessages || []).join(', ')}</textarea>
                            <small class="text-muted">
                                Available variables: {user}, {username}, {server}, {membercount}
                            </small>
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">
                            <i class="fas fa-save me-2"></i>
                            Save Welcome Settings
                        </button>
                    </form>
                </div>
            </div>

            <!-- Leave Messages Section -->
            <div class="card modern-card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-door-open me-2"></i>
                        Leave Messages
                    </h5>
                </div>
                <div class="card-body">
                    <form id="leaveForm">
                        <div class="row">
                            <div class="col-md-6">
                                <label for="leaveChannel" class="form-label">Leave Channel</label>
                                <select class="form-select" id="leaveChannel" name="channelId">
                                    <option value="">Select a channel...</option>
                                    ${channels.map(channel => `
                                        <option value="${channel.id}" ${settings.welcome.leaveChannel === channel.id ? 'selected' : ''}>
                                            #${channel.name}
                                        </option>
                                    `).join('')}
                                </select>
                            </div>
                            <div class="col-md-6">
                                <label for="leaveEnabled" class="form-label">Status</label>
                                <div class="form-check form-switch mt-2">
                                    <input class="form-check-input" type="checkbox" id="leaveEnabled" ${settings.welcome.leaveEnabled ? 'checked' : ''}>
                                    <label class="form-check-label" for="leaveEnabled">
                                        Enable leave messages
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label for="leaveMessages" class="form-label">
                                Leave Messages (comma separated)
                            </label>
                            <textarea class="form-control" id="leaveMessages" rows="4" 
                                      placeholder="{username} has left {server}. Goodbye!, We'll miss you, {username}!">${(settings.welcome.leaveMessages || []).join(', ')}</textarea>
                            <small class="text-muted">
                                Available variables: {username}, {server}, {membercount}
                            </small>
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">
                            <i class="fas fa-save me-2"></i>
                            Save Leave Settings
                        </button>
                    </form>
                </div>
            </div>

            <!-- Auto Moderation Section -->
            <div class="card modern-card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-shield-alt me-2"></i>
                        Auto Moderation
                    </h5>
                </div>
                <div class="card-body">
                    <form id="automodForm">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input" type="checkbox" id="linkFilter" ${settings.automod?.linkFilter ? 'checked' : ''}>
                                    <label class="form-check-label text-light" for="linkFilter">
                                        <strong>Link Filter</strong>
                                    </label>
                                    <div class="text-muted small mt-1">
                                        Automatically delete messages containing links
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check form-switch mb-3">
                                    <input class="form-check-input" type="checkbox" id="badWordFilter" ${settings.automod?.badWordFilter ? 'checked' : ''}>
                                    <label class="form-check-label text-light" for="badWordFilter">
                                        <strong>Bad Word Filter</strong>
                                    </label>
                                    <div class="text-muted small mt-1">
                                        Automatically delete inappropriate content
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="mt-3">
                            <label for="badWords" class="form-label text-light">
                                <strong>Bad Words List (comma separated)</strong>
                            </label>
                            <textarea class="form-control" id="badWords" rows="3" 
                                      placeholder="Enter bad words separated by commas...">${(settings.automod?.badWords || []).join(', ')}</textarea>
                            <small class="text-muted">
                                Words in this list will be automatically filtered from messages
                            </small>
                        </div>
                        <button type="submit" class="btn btn-primary mt-3">
                            <i class="fas fa-save me-2"></i>
                            Save Auto Moderation Settings
                        </button>
                    </form>
                </div>
            </div>

            <!-- Auto Role Section -->
            <div class="card modern-card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-user-plus me-2"></i>
                        Auto Role
                    </h5>
                </div>
                <div class="card-body">
                    <form id="autoroleForm">
                        <div class="row">
                            <div class="col-md-8">
                                <label for="autoRole" class="form-label">Auto Role</label>
                                <select class="form-select" id="autoRole" name="roleId">
                                    <option value="">No auto role</option>
                                    ${roles.map(role => `
                                        <option value="${role.id}" ${settings.autorole === role.id ? 'selected' : ''}>
                                            ${role.name}
                                        </option>
                                    `).join('')}
                                </select>
                                <small class="text-muted">
                                    This role will be automatically assigned to new members when they join the server.
                                </small>
                            </div>
                            <div class="col-md-4 d-flex align-items-end">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>
                                    Save Auto Role Settings
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Embed Management Section -->
            <div class="card modern-card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-layer-group me-2"></i>
                        Embed Management
                    </h5>
                    <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createEmbedModal">
                        <i class="fas fa-plus me-2"></i>
                        Create Embed
                    </button>
                </div>
                <div class="card-body">
                    <div class="embed-list">
                        ${Object.keys(settings.embeds || {}).length > 0 ? `
                            <div class="table-responsive">
                                <table class="table table-dark table-hover">
                                    <thead>
                                        <tr>
                                            <th>Title</th>
                                            <th>Channel</th>
                                            <th>Created</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${Object.entries(settings.embeds).map(([embedId, embed]) => `
                                            <tr>
                                                <td>
                                                    <strong class="text-light">${embed.title || 'Untitled'}</strong>
                                                    <div class="text-muted small">${embedId}</div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-secondary">
                                                        #${channels.find(c => c.id === embed.channelId)?.name || 'Unknown'}
                                                    </span>
                                                </td>
                                                <td class="text-muted small">
                                                    ${new Date(embed.createdAt).toLocaleDateString()}
                                                </td>
                                                <td>
                                                    <div class="btn-group" role="group" aria-label="Embed actions">
                                                        <button class="btn btn-sm btn-edit me-2" onclick="editEmbed('${embedId}')" 
                                                                title="Edit this embed" data-bs-toggle="tooltip">
                                                            <i class="fas fa-edit me-1"></i>
                                                            <span class="btn-text">Edit</span>
                                                        </button>
                                                        <button class="btn btn-sm btn-delete" onclick="deleteEmbed('${embedId}')" 
                                                                title="Delete this embed permanently" data-bs-toggle="tooltip">
                                                            <i class="fas fa-trash-alt me-1"></i>
                                                            <span class="btn-text">Delete</span>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        ` : `
                            <div class="text-center py-5">
                                <div class="mb-3">
                                    <i class="fas fa-layer-group fa-3x text-muted"></i>
                                </div>
                                <h5 class="text-light">No embeds created</h5>
                                <p class="text-muted">Click "Create Embed" to start creating beautiful embeds for your server.</p>
                            </div>
                        `}
                    </div>
                </div>
            </div>

            <!-- Admin & Owner Commands Section -->
            <div class="card modern-card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-crown me-2"></i>
                        Admin & Owner Commands
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-4">
                        <div class="col-lg-6">
                            <div class="command-category">
                                <div class="category-header">
                                    <i class="fas fa-shield-alt"></i>
                                    <h5>Moderation Commands</h5>
                                </div>
                                <div class="command-list">
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/ban</code>
                                            <span class="badge bg-danger">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/ban @user [reason]</code></p>
                                        <p>Permanently ban a user from the server. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/kick</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/kick @user [reason]</code></p>
                                        <p>Remove a user from the server. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/mute</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/mute @user &lt;minutes&gt; [reason]</code></p>
                                        <p>Timeout a user for specified minutes (max 28 days). Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/unmute</code>
                                            <span class="badge bg-success">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/unmute @user [reason]</code></p>
                                        <p>Remove timeout from a user. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/warn</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/warn @user &lt;reason&gt;</code></p>
                                        <p>Send a warning to a user via DM. Requires Administrator permission.</p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-lg-6">
                            <div class="command-category">
                                <div class="category-header">
                                    <i class="fas fa-cog"></i>
                                    <h5>Management Commands</h5>
                                </div>
                                <div class="command-list">
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/commandassign</code>
                                            <span class="badge bg-primary">Owner</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/commandassign mode:assign command:bypass2008 channel:#channel</code></p>
                                        <p>Assign specific commands to specific channels. Only Server/Bot owners can use this.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/removecommand</code>
                                            <span class="badge bg-primary">Owner</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/removecommand command:bypass2008 [channel:#channel]</code></p>
                                        <p>Remove command assignments from channels. Only Server/Bot owners can use this.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/embedcreate</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/embedcreate channel:#channel title:"Title" description:"Description"</code></p>
                                        <p>Create custom embeds with buttons, images, and colors. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/embedupdate</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/embedupdate embed_id:&lt;id&gt; title:"New Title"</code></p>
                                        <p>Update existing embeds using their ID. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/setwelcome</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/setwelcome channel:#channel message:"Welcome {user}!"</code></p>
                                        <p>Configure welcome messages with variables. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/setleave</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/setleave channel:#channel message:"Goodbye {username}!"</code></p>
                                        <p>Configure leave messages with variables. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/automod</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/automod setting:link_on</code> or <code>/automod setting:add_word word:"badword"</code></p>
                                        <p>Configure auto-moderation settings including link and word filters. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/addrole</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/addrole mode:user role:@Role user:@User</code></p>
                                        <p>Add roles to specific users or all members. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/autorole</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/autorole mode:set role:@Role</code></p>
                                        <p>Set automatic role assignment for new members. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/removerole</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/removerole mode:user role:@Role user:@User</code></p>
                                        <p>Remove roles from specific users or all members. Requires Administrator permission.</p>
                                    </div>
                                    <div class="command-item">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <code>/restrictchannel</code>
                                            <span class="badge bg-warning">Admin</span>
                                        </div>
                                        <p><strong>Usage:</strong> <code>/restrictchannel channel:#channel action:restrict</code></p>
                                        <p>Make channels commands-only or unrestrict them. Requires Administrator permission.</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-info mt-4">
                        <h6><i class="fas fa-info-circle me-2"></i>Permission Levels:</h6>
                        <ul class="mb-0">
                            <li><span class="badge bg-primary me-2">Owner</span>Server Owner or Bot Owner only</li>
                            <li><span class="badge bg-danger me-2">Admin</span>Requires Administrator permission</li>
                            <li><span class="badge bg-warning me-2">Admin</span>Requires Administrator permission</li>
                            <li><span class="badge bg-success me-2">Admin</span>Requires Administrator permission</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Embed Modal -->
<div class="modal fade" id="createEmbedModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title text-light">
                    <i class="fas fa-plus me-2"></i>
                    Create New Embed
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createEmbedForm">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="embedTitle" class="form-label text-light">Title</label>
                            <input type="text" class="form-control" id="embedTitle" placeholder="Enter embed title">
                        </div>
                        <div class="col-md-6">
                            <label for="embedChannel" class="form-label text-light">Channel</label>
                            <select class="form-select" id="embedChannel" required>
                                <option value="">Select a channel...</option>
                                ${channels.map(channel => `
                                    <option value="${channel.id}">#${channel.name}</option>
                                `).join('')}
                            </select>
                        </div>
                    </div>
                    <div class="mt-3">
                        <label for="embedDescription" class="form-label text-light">Description</label>
                        <textarea class="form-control" id="embedDescription" rows="3" placeholder="Enter embed description"></textarea>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-4">
                            <label for="embedColor" class="form-label text-light">Color</label>
                            <input type="text" class="form-control" id="embedColor" placeholder="#0099ff or blue">
                        </div>
                        <div class="col-md-4">
                            <label for="embedThumbnail" class="form-label text-light">Thumbnail URL</label>
                            <input type="url" class="form-control" id="embedThumbnail" placeholder="https://...">
                        </div>
                        <div class="col-md-4">
                            <label for="embedImage" class="form-label text-light">Image URL</label>
                            <input type="url" class="form-control" id="embedImage" placeholder="https://...">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-8">
                            <label for="embedFooter" class="form-label text-light">Footer Text</label>
                            <input type="text" class="form-control" id="embedFooter" placeholder="Footer text">
                        </div>
                        <div class="col-md-4">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="embedTimestamp">
                                <label class="form-check-label text-light" for="embedTimestamp">
                                    Add timestamp
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="mt-3">
                        <label for="embedButtons" class="form-label text-light">Buttons (optional)</label>
                        <textarea class="form-control" id="embedButtons" rows="2" 
                                  placeholder="Label1,https://url1.com|Label2,https://url2.com"></textarea>
                        <small class="text-muted">
                            Format: "Label,URL" separated by | (max 5 buttons). Supports emojis: "&lt;:emoji:id&gt; Label,URL"
                        </small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" onclick="createEmbed()">
                    <i class="fas fa-paper-plane me-2"></i>
                    Create & Send Embed
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Embed Modal -->
<div class="modal fade" id="editEmbedModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark">
            <div class="modal-header">
                <h5 class="modal-title text-light">
                    <i class="fas fa-edit me-2"></i>
                    Edit Embed
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editEmbedForm">
                    <input type="hidden" id="editEmbedId">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="editEmbedTitle" class="form-label text-light">Title</label>
                            <input type="text" class="form-control" id="editEmbedTitle" placeholder="Enter embed title">
                        </div>
                        <div class="col-md-6">
                            <label for="editEmbedChannel" class="form-label text-light">Channel</label>
                            <select class="form-select" id="editEmbedChannel" required>
                                <option value="">Select a channel...</option>
                                ${channels.map(channel => `
                                    <option value="${channel.id}">#${channel.name}</option>
                                `).join('')}
                            </select>
                        </div>
                    </div>
                    <div class="mt-3">
                        <label for="editEmbedDescription" class="form-label text-light">Description</label>
                        <textarea class="form-control" id="editEmbedDescription" rows="3" placeholder="Enter embed description"></textarea>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-4">
                            <label for="editEmbedColor" class="form-label text-light">Color</label>
                            <input type="text" class="form-control" id="editEmbedColor" placeholder="#0099ff or blue">
                        </div>
                        <div class="col-md-4">
                            <label for="editEmbedThumbnail" class="form-label text-light">Thumbnail URL</label>
                            <input type="url" class="form-control" id="editEmbedThumbnail" placeholder="https://...">
                        </div>
                        <div class="col-md-4">
                            <label for="editEmbedImage" class="form-label text-light">Image URL</label>
                            <input type="url" class="form-control" id="editEmbedImage" placeholder="https://...">
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-8">
                            <label for="editEmbedFooter" class="form-label text-light">Footer Text</label>
                            <input type="text" class="form-control" id="editEmbedFooter" placeholder="Footer text">
                        </div>
                        <div class="col-md-4">
                            <div class="form-check form-switch mt-4">
                                <input class="form-check-input" type="checkbox" id="editEmbedTimestamp">
                                <label class="form-check-label text-light" for="editEmbedTimestamp">
                                    Add timestamp
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="mt-3">
                        <label for="editEmbedButtons" class="form-label text-light">Buttons (optional)</label>
                        <textarea class="form-control" id="editEmbedButtons" rows="2" 
                                  placeholder="Label1,https://url1.com|Label2,https://url2.com"></textarea>
                        <small class="text-muted">
                            Format: "Label,URL" separated by | (max 5 buttons). Supports emojis: "&lt;:emoji:id&gt; Label,URL"
                        </small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="updateEmbed()">
                    <i class="fas fa-save me-2"></i>
                    Update & Send Embed
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    .modern-card {
        background: var(--discord-bg-secondary);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 4px 25px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
    }

    .modern-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 35px rgba(0, 0, 0, 0.25);
    }

    .card-header {
        background: rgba(88, 101, 242, 0.1);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        padding: 1.25rem 1.5rem;
    }

    .card-title {
        color: var(--discord-text-normal);
        font-weight: 600;
        display: flex;
        align-items: center;
    }

    .card-title i {
        color: var(--discord-blurple);
    }

    .form-label {
        color: var(--discord-text-normal);
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .form-control, .form-select {
        background: var(--discord-bg-primary);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: var(--discord-text-normal);
        border-radius: 8px;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
    }

    .form-control:focus, .form-select:focus {
        background: var(--discord-bg-primary);
        border-color: var(--discord-blurple);
        color: var(--discord-text-normal);
        box-shadow: 0 0 0 0.2rem rgba(88, 101, 242, 0.25);
    }

    .form-control::placeholder {
        color: var(--discord-text-muted);
    }

    .form-check-input:checked {
        background-color: var(--discord-blurple);
        border-color: var(--discord-blurple);
    }

    .form-check-input:focus {
        box-shadow: 0 0 0 0.2rem rgba(88, 101, 242, 0.25);
    }

    .form-check-label {
        color: var(--discord-text-normal);
        font-weight: 500;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--discord-blurple), #4752C4);
        border: none;
        color: var(--discord-white);
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .btn-primary:hover {
        background: linear-gradient(135deg, #4752C4, var(--discord-blurple));
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(88, 101, 242, 0.4);
    }

    .btn-success {
        background: linear-gradient(135deg, var(--discord-green), #3BA55D);
        border: none;
        color: var(--discord-darker);
        font-weight: 600;
    }

    .btn-success:hover {
        background: linear-gradient(135deg, #3BA55D, var(--discord-green));
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(87, 242, 135, 0.4);
    }

    .btn-outline-primary {
        border: 2px solid var(--discord-blurple);
        color: var(--discord-blurple);
        background: transparent;
        font-weight: 600;
    }

    .btn-outline-primary:hover {
        background: var(--discord-blurple);
        color: var(--discord-white);
    }

    .btn-outline-danger {
        border: 1px solid var(--discord-red);
        color: var(--discord-red);
        background: transparent;
    }

    .btn-outline-danger:hover {
        background: var(--discord-red);
        color: var(--discord-white);
    }

    .table-dark {
        background: var(--discord-bg-primary);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

    .table-dark th {
        background: rgba(88, 101, 242, 0.1);
        border-color: rgba(255, 255, 255, 0.1);
        color: var(--discord-text-normal);
        font-weight: 600;
    }

    .table-dark td {
        border-color: rgba(255, 255, 255, 0.05);
        color: var(--discord-text-normal);
    }

    .table-hover tbody tr:hover {
        background: rgba(255, 255, 255, 0.05);
    }

    .badge {
        font-weight: 500;
        padding: 0.5rem 0.75rem;
        border-radius: 20px;
    }

    .bg-discord-primary {
        background: var(--discord-blurple) !important;
    }

    .alert-info {
        background: rgba(88, 101, 242, 0.1);
        border: 1px solid rgba(88, 101, 242, 0.2);
        color: var(--discord-text-normal);
        border-radius: 8px;
    }

    .modal-content {
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 16px;
    }

    .modal-header {
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .modal-footer {
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .text-light {
        color: var(--discord-text-normal) !important;
    }

    /* Enhanced text visibility for automod section */
    .card-body .form-check-label {
        color: var(--discord-text-normal) !important;
    }

    .card-body .form-check-label strong {
        color: #ffffff !important;
        font-weight: 600;
    }

    .card-body .text-muted {
        color: var(--discord-text-muted) !important;
        opacity: 0.8;
    }

    .command-assignments, .restricted-channels {
        background: var(--discord-bg-primary);
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Commands section styles */
    .command-category {
        background: var(--discord-bg-primary);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 1.5rem;
        height: 100%;
    }

    .category-header {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .category-header i {
        font-size: 1.25rem;
        color: var(--discord-blurple);
        margin-right: 0.75rem;
    }

    .category-header h5 {
        color: var(--discord-text-normal);
        font-weight: 600;
        margin: 0;
    }

    .command-list {
        max-height: 600px;
        overflow-y: auto;
    }

    .command-item {
        background: rgba(255, 255, 255, 0.03);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        transition: all 0.3s ease;
    }

    .command-item:hover {
        background: rgba(255, 255, 255, 0.05);
        border-color: rgba(88, 101, 242, 0.3);
    }

    .command-item code {
        background: rgba(88, 101, 242, 0.2);
        color: var(--discord-blurple);
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-weight: 600;
        font-size: 0.875rem;
    }

    .command-item p {
        margin: 0.5rem 0 0 0;
        color: var(--discord-text-muted);
        font-size: 0.875rem;
        line-height: 1.4;
    }

    .command-item p strong {
        color: var(--discord-text-normal);
        font-weight: 600;
    }

    .badge {
        font-size: 0.75rem;
        font-weight: 600;
        padding: 0.25rem 0.75rem;
        border-radius: 12px;
    }

    .bg-primary { background: var(--discord-blurple) !important; }
    .bg-danger { background: var(--discord-red) !important; }
    .bg-warning { background: var(--discord-yellow) !important; color: var(--discord-darker) !important; }
    .bg-success { background: var(--discord-green) !important; color: var(--discord-darker) !important; }

    /* Enhanced button styles for embed management */
    .btn-edit {
        background: linear-gradient(135deg, #4A90E2, #357ABD);
        border: 1px solid rgba(74, 144, 226, 0.3);
        color: #ffffff;
        font-weight: 500;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(74, 144, 226, 0.2);
    }

    .btn-edit:hover {
        background: linear-gradient(135deg, #357ABD, #2A5F94);
        border-color: rgba(74, 144, 226, 0.5);
        color: #ffffff;
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(74, 144, 226, 0.3);
    }

    .btn-edit:active {
        transform: translateY(0);
        box-shadow: 0 2px 8px rgba(74, 144, 226, 0.2);
    }

    .btn-delete {
        background: linear-gradient(135deg, #E74C3C, #C0392B);
        border: 1px solid rgba(231, 76, 60, 0.3);
        color: #ffffff;
        font-weight: 500;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(231, 76, 60, 0.2);
    }

    .btn-delete:hover {
        background: linear-gradient(135deg, #C0392B, #A93226);
        border-color: rgba(231, 76, 60, 0.5);
        color: #ffffff;
        transform: translateY(-1px);
        box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
    }

    .btn-delete:active {
        transform: translateY(0);
        box-shadow: 0 2px 8px rgba(231, 76, 60, 0.2);
    }

    .btn-group {
        display: flex;
        gap: 0.5rem;
        align-items: center;
    }

    .btn-edit i, .btn-delete i {
        font-size: 0.875rem;
    }

    .btn-text {
        font-size: 0.875rem;
        font-weight: 500;
    }

    /* Responsive button behavior */
    @media (max-width: 992px) {
        .btn-text {
            display: none;
        }

        .btn-edit, .btn-delete {
            padding: 0.5rem 0.75rem;
            min-width: 40px;
        }

        .btn-edit i, .btn-delete i {
            margin: 0 !important;
        }
    }

    @media (max-width: 768px) {
        .modern-card {
            margin-bottom: 1.5rem;
        }

        .card-header {
            padding: 1rem;
        }

        .card-body {
            padding: 1rem;
        }

        .btn-group {
            gap: 0.25rem;
        }
    }
</style>

<script>
    const guildId = '${guild.id}';
    const embedsData = ${JSON.stringify(settings.embeds || {})};

    // Form submission handlers
    document.getElementById('welcomeForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const messages = document.getElementById('welcomeMessages').value.split(',').map(msg => msg.trim()).filter(msg => msg);

        try {
            const response = await fetch(\`/api/guild/\${guildId}/welcome\`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    channelId: formData.get('channelId'),
                    messages: messages,
                    enabled: document.getElementById('welcomeEnabled').checked
                })
            });

            if (response.ok) {
                showNotification('Welcome settings saved successfully!', 'success');
            } else {
                throw new Error('Failed to save settings');
            }
        } catch (error) {
            showNotification('Failed to save welcome settings', 'error');
        }
    });

    document.getElementById('leaveForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);
        const messages = document.getElementById('leaveMessages').value.split(',').map(msg => msg.trim()).filter(msg => msg);

        try {
            const response = await fetch(\`/api/guild/\${guildId}/leave\`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    channelId: formData.get('channelId'),
                    messages: messages,
                    enabled: document.getElementById('leaveEnabled').checked
                })
            });

            if (response.ok) {
                showNotification('Leave settings saved successfully!', 'success');
            } else {
                throw new Error('Failed to save settings');
            }
        } catch (error) {
            showNotification('Failed to save leave settings', 'error');
        }
    });

    document.getElementById('automodForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const badWords = document.getElementById('badWords').value.split(',').map(word => word.trim()).filter(word => word);

        try {
            const response = await fetch(\`/api/guild/\${guildId}/automod\`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    linkFilter: document.getElementById('linkFilter').checked,
                    badWordFilter: document.getElementById('badWordFilter').checked,
                    badWords: badWords
                })
            });

            if (response.ok) {
                showNotification('Auto moderation settings saved successfully!', 'success');
            } else {
                throw new Error('Failed to save settings');
            }
        } catch (error) {
            showNotification('Failed to save auto moderation settings', 'error');
        }
    });

    document.getElementById('autoroleForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(e.target);

        try {
            const response = await fetch(\`/api/guild/\${guildId}/autorole\`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    roleId: formData.get('roleId')
                })
            });

            if (response.ok) {
                showNotification('Auto role settings saved successfully!', 'success');
            } else {
                throw new Error('Failed to save settings');
            }
        } catch (error) {
            showNotification('Failed to save auto role settings', 'error');
        }
    });

    // Embed management functions
    async function createEmbed() {
        const title = document.getElementById('embedTitle').value;
        const description = document.getElementById('embedDescription').value;
        const channelId = document.getElementById('embedChannel').value;
        const color = document.getElementById('embedColor').value;
        const thumbnail = document.getElementById('embedThumbnail').value;
        const image = document.getElementById('embedImage').value;
        const footer = document.getElementById('embedFooter').value;
        const timestamp = document.getElementById('embedTimestamp').checked;
        const buttons = document.getElementById('embedButtons').value;

        if (!title || !description || !channelId) {
            showNotification('Please fill in title, description, and select a channel', 'error');
            return;
        }

        try {
            const response = await fetch(\`/api/guild/\${guildId}/embed/create\`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    title, description, channelId, color, thumbnail, image, footer, timestamp, buttons
                })
            });

            const result = await response.json();

            if (response.ok) {
                showNotification('Embed created and sent successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('createEmbedModal')).hide();
                setTimeout(() => location.reload(), 1500);
            } else {
                throw new Error(result.error || 'Failed to create embed');
            }
        } catch (error) {
            showNotification(error.message, 'error');
        }
    }

    function editEmbed(embedId) {
        const embed = embedsData[embedId];
        if (!embed) return;

        // Populate edit form
        document.getElementById('editEmbedId').value = embedId;
        document.getElementById('editEmbedTitle').value = embed.title || '';
        document.getElementById('editEmbedDescription').value = embed.description || '';
        document.getElementById('editEmbedChannel').value = embed.channelId || '';
        document.getElementById('editEmbedColor').value = embed.color || '';
        document.getElementById('editEmbedThumbnail').value = embed.thumbnail || '';
        document.getElementById('editEmbedImage').value = embed.image || '';
        document.getElementById('editEmbedFooter').value = embed.footer || '';
        document.getElementById('editEmbedTimestamp').checked = embed.timestamp || false;
        document.getElementById('editEmbedButtons').value = embed.buttons || '';

        // Show modal
        new bootstrap.Modal(document.getElementById('editEmbedModal')).show();
    }

    async function updateEmbed() {
        const embedId = document.getElementById('editEmbedId').value;
        const title = document.getElementById('editEmbedTitle').value;
        const description = document.getElementById('editEmbedDescription').value;
        const channelId = document.getElementById('editEmbedChannel').value;
        const color = document.getElementById('editEmbedColor').value;
        const thumbnail = document.getElementById('editEmbedThumbnail').value;
        const image = document.getElementById('editEmbedImage').value;
        const footer = document.getElementById('editEmbedFooter').value;
        const timestamp = document.getElementById('editEmbedTimestamp').checked;
        const buttons = document.getElementById('editEmbedButtons').value;

        if (!title || !description || !channelId) {
            showNotification('Please fill in title, description, and select a channel', 'error');
            return;
        }

        try {
            const response = await fetch(\`/api/guild/\${guildId}/embed/\${embedId}/update\`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    title, description, channelId, color, thumbnail, image, footer, timestamp, buttons
                })
            });

            const result = await response.json();

            if (response.ok) {
                showNotification('Embed updated successfully!', 'success');
                bootstrap.Modal.getInstance(document.getElementById('editEmbedModal')).hide();
                setTimeout(() => location.reload(), 1500);
            } else {
                throw new Error(result.error || 'Failed to update embed');
            }
        } catch (error) {
            showNotification(error.message, 'error');
        }
    }

    async function deleteEmbed(embedId) {
        if (!confirm('Are you sure you want to delete this embed?')) return;

        try {
            const response = await fetch(\`/api/guild/\${guildId}/embed/\${embedId}\`, {
                method: 'DELETE'
            });

            if (response.ok) {
                showNotification('Embed deleted successfully!', 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                throw new Error('Failed to delete embed');
            }
        } catch (error) {
            showNotification('Failed to delete embed', 'error');
        }
    }

    // Initialize tooltips
    document.addEventListener('DOMContentLoaded', function() {
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });
    });

    function showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        const colors = {
            success: 'linear-gradient(135deg, var(--discord-green), #3BA55D)',
            error: 'linear-gradient(135deg, var(--discord-red), #C73E1D)',
            warning: 'linear-gradient(135deg, var(--discord-yellow), #E0B54D)',
            info: 'linear-gradient(135deg, var(--discord-blurple), #4752C4)'
        };

        notification.style.cssText = \`
            position: fixed;
            top: 90px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            color: white;
            font-weight: 500;
            z-index: 9999;
            transition: all 0.3s ease;
            max-width: 400px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
            background: \${colors[type] || colors.info};
        \`;

        const icons = {
            success: 'check-circle',
            error: 'exclamation-triangle',
            warning: 'exclamation-circle',
            info: 'info-circle'
        };

        notification.innerHTML = \`
            <div style="display: flex; align-items: center;">
                <i class="fas fa-\${icons[type] || icons.info} me-2"></i>
                \${message}
            </div>
        \`;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (document.body.contains(notification)) {
                    document.body.removeChild(notification);
                }
            }, 300);
        }, 5000);
    }
</script>
` }) %>